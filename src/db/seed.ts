import { v4 as uuidv4 } from 'uuid';

import { db } from './index';
import {
  cart,
  categories,
  couriers,
  deliveryAddresses,
  favorites,
  menuItems,
  orders,
  orderStatuses,
  paymentMethods,
  restaurants,
  reviews,
  users,
} from './schema';

async function seed() {
  console.log('üå± –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

  // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü –ø–µ—Ä–µ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º
  await db.delete(reviews);
  await db.delete(cart);
  await db.delete(favorites);
  await db.delete(orders);
  await db.delete(deliveryAddresses);
  await db.delete(paymentMethods);
  await db.delete(users);
  await db.delete(menuItems);
  await db.delete(categories);
  await db.delete(restaurants);
  await db.delete(orderStatuses);
  await db.delete(couriers);

  const restaurantData = [
    {
      id: uuidv4(),
      name: '–¢—Ä–∞–ø–µ–∑–∞ –Ø—Ä–æ–ø–æ–ª–∫–∞',
      description: '–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è –∫—É—Ö–Ω—è.',
      rating: 5,
      deliveryTime: '30-40 –º–∏–Ω',
      cuisineType: '–°–ª–∞–≤—è–Ω—Å–∫–∞—è',
      averagePrice: 1500,
      imageUrl: '/images/restaurants/yaropolk.png',
    },
    {
      id: uuidv4(),
      name: '–ú–µ–¥¬†–∏¬†–ø–µ—Ä–µ—Ü',
      description: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±–ª—é–¥–∞ —Å¬†–∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞¬†–º–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã',
      rating: 4,
      deliveryTime: '40-50 –º–∏–Ω',
      cuisineType: '–ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è',
      averagePrice: 2000,
      imageUrl: '/images/restaurants/honey-pepper.png',
    },
    {
      id: uuidv4(),
      name: '¬´–°–ª–∞–≤—è–Ω—Å–∫–∏–π¬†–ø–∏—Ä¬ª',
      description: '–ê—É—Ç–µ–Ω—Ç–∏—á–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã, –±–ª—é–¥–∞ –¥–ª—è¬†–≥—É—Ä–º–∞–Ω–æ–≤',
      rating: 3,
      deliveryTime: '25-35 –º–∏–Ω',
      cuisineType: '–ú–∏–∫—Å –∫—É–ª–∏–Ω–∞—Ä–Ω—ã—Ö —Ç—Ä–∞–¥–∏—Ü–∏–π',
      averagePrice: 1200,
      imageUrl: '/images/restaurants/slavic-party.png',
    },
    {
      id: uuidv4(),
      name: '–ë–µ—Ä–µ—Å—Ç—è–Ω–æ–π –¥–≤–æ—Ä',
      description: '–ë–ª—é–¥–∞ –≤¬†—Å—Ç–∞—Ä–∏–Ω–Ω–æ–º —Å—Ç–∏–ª–µ, —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ —Å—É–ø—ã –∏¬†–ø–∏—Ä–æ–≥–∏',
      rating: 4.7,
      deliveryTime: '25-35 –º–∏–Ω',
      cuisineType: '–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è —Ä—É—Å—Å–∫–∞—è',
      averagePrice: 1000,
      imageUrl: '/images/restaurants/beresta.png',
    },
    {
      id: uuidv4(),
      name: '–í–∞—Ä–≥–∞–Ω',
      description: '–°–ø–µ—Ü–∏–∏ –∏¬†–∞—Ä–æ–º–∞—Ç—ã —Å–µ–≤–µ—Ä–∞ –∏¬†—é–≥–∞',
      rating: 4.2,
      deliveryTime: '20-30 –º–∏–Ω',
      cuisineType: '–ú–∏–∫—Å –∫—É–ª–∏–Ω–∞—Ä–Ω—ã—Ö —Ç—Ä–∞–¥–∏—Ü–∏–π',
      averagePrice: 900,
      imageUrl: '/images/restaurants/vargan.png',
    },
    {
      id: uuidv4(),
      name: '–ë—É–ª–æ—á–Ω–∞—è —É¬†–†–∞–¥–º–∏–ª—ã',
      description: '–°–≤–µ–∂–∞—è –≤—ã–ø–µ—á–∫–∞, –ø–∏—Ä–æ–≥–∏ –∏¬†–¥–æ–º–∞—à–Ω–∏–µ –¥–µ—Å–µ—Ä—Ç—ã',
      rating: 3.7,
      deliveryTime: '15-25 –º–∏–Ω',
      cuisineType: '–ö–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∞—è',
      averagePrice: 700,
      imageUrl: '/images/restaurants/radmila.png',
    },
    {
      id: uuidv4(),
      name: '¬´–ì–æ—Ä–æ–¥—Å–∫–æ–π –¥–≤–æ—Ä–∏–∫¬ª',
      description: '–£–ª–∏—á–Ω–∞—è –µ–¥–∞¬†–∏¬†—Å—ã—Ç–Ω—ã–µ –∑–∞–∫—É—Å–∫–∏',
      rating: 2.7,
      deliveryTime: '20-30 –º–∏–Ω',
      cuisineType: '–°—Ç—Ä–∏—Ç—Ñ—É–¥',
      averagePrice: 1000,
      imageUrl: '/images/restaurants/dvorik.png',
    },
    {
      id: uuidv4(),
      name: '–õ–µ—Å–Ω–æ–µ –∑–∞—Å—Ç–æ–ª—å–µ',
      description: '–§–µ—Ä–º–µ—Ä—Å–∫–∞—è –∫—É—Ö–Ω—è, —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ —á–∏—Å—Ç—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã',
      rating: 5,
      deliveryTime: '25-35 –º–∏–Ω',
      cuisineType: '–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è',
      averagePrice: 1950,
      imageUrl: '/images/restaurants/lesnoe.png',
    },
    {
      id: uuidv4(),
      name: '–†—ã–±–∞—Ü–∫–∞—è –∞—Ä—Ç–µ–ª—å',
      description: '–£–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ –≤–∫—É—Å–æ–≤ —Å–æ –≤—Å–µ–≥–æ –º–∏—Ä–∞.',
      rating: 4.4,
      deliveryTime: '40-50 –º–∏–Ω',
      cuisineType: '–†—ã–±–Ω–∞—è',
      averagePrice: 900,
      imageUrl: '/images/restaurants/fish.png',
    },
  ];
  await db.insert(restaurants).values(restaurantData);

  const categoryData = [
    { id: uuidv4(), restaurantId: restaurantData[0].id, name: '–û—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞' },
    { id: uuidv4(), restaurantId: restaurantData[1].id, name: '–î–µ—Å–µ—Ä—Ç—ã' },
  ];
  await db.insert(categories).values(categoryData);

  const menuData = [
    {
      id: uuidv4(),
      categoryId: categoryData[0].id,
      restaurantId: restaurantData[0].id,
      name: '–§–∏–ª–µ –º–∏–Ω—å–æ–Ω',
      description: '–ù–µ–∂–Ω–µ–π—à–∞—è –≥–æ–≤—è–¥–∏–Ω–∞ —Å —Å–æ—É—Å–æ–º.',
      price: 1500,
      imageUrl: '/images/food.png',
    },
    {
      id: uuidv4(),
      categoryId: categoryData[1].id,
      restaurantId: restaurantData[0].id,
      name: '–§–∏–ª–µ –º–∏–Ω—å–æ–Ω 2',
      description: '–ù–µ–∂–Ω–µ–π—à–∞—è –≥–æ–≤—è–¥–∏–Ω–∞ —Å —Å–æ—É—Å–æ–º.',
      price: 1500,
      imageUrl: '/images/food.png',
    },
    {
      id: uuidv4(),
      categoryId: categoryData[1].id,
      restaurantId: restaurantData[0].id,
      name: '–§–∏–ª–µ –º–∏–Ω—å–æ–Ω 3',
      description: '–ù–µ–∂–Ω–µ–π—à–∞—è –≥–æ–≤—è–¥–∏–Ω–∞ —Å —Å–æ—É—Å–æ–º.',
      price: 1500,
      imageUrl: '/images/food.png',
    },
    {
      id: uuidv4(),
      categoryId: categoryData[0].id,
      restaurantId: restaurantData[0].id,
      name: '–§–∏–ª–µ –º–∏–Ω—å–æ–Ω 4',
      description: '–ù–µ–∂–Ω–µ–π—à–∞—è –≥–æ–≤—è–¥–∏–Ω–∞ —Å —Å–æ—É—Å–æ–º.',
      price: 1500,
      imageUrl: '/images/food.png',
    },
    {
      id: uuidv4(),
      categoryId: categoryData[0].id,
      restaurantId: restaurantData[0].id,
      name: '–§–∏–ª–µ –º–∏–Ω—å–æ–Ω 5',
      description: '–ù–µ–∂–Ω–µ–π—à–∞—è –≥–æ–≤—è–¥–∏–Ω–∞ —Å —Å–æ—É—Å–æ–º.',
      price: 1500,
      imageUrl: '/images/food.png',
    },
    {
      id: uuidv4(),
      categoryId: categoryData[0].id,
      restaurantId: restaurantData[0].id,
      name: '–§–∏–ª–µ –º–∏–Ω—å–æ–Ω 6',
      description: '–ù–µ–∂–Ω–µ–π—à–∞—è –≥–æ–≤—è–¥–∏–Ω–∞ —Å —Å–æ—É—Å–æ–º.',
      price: 1500,
      imageUrl: '/images/food.png',
    },
    {
      id: uuidv4(),
      categoryId: categoryData[1].id,
      restaurantId: restaurantData[1].id,
      name: '–ß–∏–∑–∫–µ–π–∫',
      description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —á–∏–∑–∫–µ–π–∫ —Å —è–≥–æ–¥–∞–º–∏.',
      price: 600,
      imageUrl: '/images/food.png',
    },
  ];
  await db.insert(menuItems).values(menuData);

  const userData = [
    {
      id: uuidv4(),
      firstName: '–ò–≤–∞–Ω',
      lastName: '–ò–≤–∞–Ω–æ–≤',
      accountName: 'ivan123',
      email: 'ivan@example.com',
      passwordHash: 'hashedpassword',
      phone: '79990001122',
      address: '–ú–æ—Å–∫–≤–∞',
      cardNumber: '1234123412341234',
    },
  ];
  await db.insert(users).values(userData);

  const addressData = [
    { id: 1, userId: userData[0].id, address: '–õ–µ–Ω–∏–Ω–∞, 10', comment: 'code: 1111' },
  ];
  await db.insert(deliveryAddresses).values(addressData);

  const paymentMethodsData = [
    { id: 1, userId: userData[0].id, type: '–ö–∞—Ä—Ç–∞', details: '1234 4321 4321 1234' },
  ];
  await db.insert(paymentMethods).values(paymentMethodsData);

  const statusData = [
    { id: 1, name: '–°–æ–∑–¥–∞–Ω' },
    { id: 2, name: '–í –ø—É—Ç–∏' },
    { id: 3, name: '–î–æ—Å—Ç–∞–≤–ª–µ–Ω' },
  ];
  await db.insert(orderStatuses).values(statusData);

  const courierData = [{ id: 1, name: '–°–µ—Ä–≥–µ–π', phone: '79991234567' }];
  await db.insert(couriers).values(courierData);

  const cartData = [
    {
      id: uuidv4(),
      userId: userData[0].id,
      menuItemId: menuData[0].id,
      quantity: 2,
      orderAmount: menuData[0].price * 2,
    },
  ];
  await db.insert(cart).values(cartData);

  const orderData = [
    {
      id: 1,
      userId: userData[0].id,
      deliveryAddressId: addressData[0].id,
      restaurantId: restaurantData[0].id,
      cartId: cartData[0].id,
      courierId: courierData[0].id,
      statusId: statusData[0].id,
      paymentMethodId: paymentMethodsData[0].id,
      orderDate: new Date().toISOString(),
    },
    {
      id: 2,
      userId: userData[0].id,
      deliveryAddressId: addressData[0].id,
      restaurantId: restaurantData[1].id,
      cartId: cartData[0].id,
      courierId: courierData[0].id,
      statusId: statusData[0].id,
      paymentMethodId: paymentMethodsData[0].id,
      orderDate: new Date().toISOString(),
    },
    {
      id: 3,
      userId: userData[0].id,
      deliveryAddressId: addressData[0].id,
      restaurantId: restaurantData[0].id,
      cartId: cartData[0].id,
      courierId: courierData[0].id,
      statusId: statusData[0].id,
      paymentMethodId: paymentMethodsData[0].id,
      orderDate: new Date().toISOString(),
    },
    {
      id: 4,
      userId: userData[0].id,
      deliveryAddressId: addressData[0].id,
      restaurantId: restaurantData[1].id,
      cartId: cartData[0].id,
      courierId: courierData[0].id,
      statusId: statusData[0].id,
      paymentMethodId: paymentMethodsData[0].id,
      orderDate: new Date().toISOString(),
    },
  ];
  await db.insert(orders).values(orderData);

  console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!');
}

seed()
  .then(() => process.exit(0))
  .catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã:', error);
    process.exit(1);
  });
